<uncaughtException>
js 코드 한줄에서 에러 발생시 node.js 프로세스 전체가 죽는다 따라서 Exception처리가 절대적으로 필요
참고)node.js 문서
	Event: 'uncaughtException'
	http://nodejs.org/docs/v0.6.7/api/all.html#event_uncaughtException_
	Especially for server programs that are designed to stay running forever, 
	uncaughtException can be a useful safety mechanism.
강제로 에러 발생 코드 : throw new Error('this is error'); or nonExistentFunc(); or error.error.error();

<event connection limit>
node.js는 한 이벤트에 10개가 넘는 리스너를 연결할 경우 개발자 실수로 간주 (default 값이 10개)
setMaxListeners(limit) : 이벤트 리스너 연결 개수를 조절 (limit 값이 0이면 무한대)

<event delete>
removeListener(eventName, handler) : 특정 이벤트의 이벤트 리스너를 제거합니다
removeAllListeners([eventName]) : 모든 이벤트 제거

<이벤트 강제발생>
emit(event,[arg1],[arg2],[...]) : 이벤트를 실행
provess.exit(); : 프로그램 종료

<이벤트생성>
이벤트를 연결할 수 있는 모든 객체는 eventemitter 객체의 상속을 받음.
EventEmitter 객체를 생성 : var custom = new process.EventEmitter();
원래 EventEmitter 객체는 events 모듈 안에 들어 있었지만 편하게 사용하고자 process 객체안에도 추가됌

<http module>
http는 tcp/ip를 기반으로 하는 프로토콜
스트림 : 프로그램이 프로그램 외부와 통신할 때는 스트림을 사용, 키보드 입력이 프로그램 안으로 들어갈 때
표준 입력 스트림(stdin). 마찬가지로 웹에서 데이터가 전송될 때도 스트림을 타고 흠

<server 객체>
listen(port[, callback])) : 서버실행
close() : 서버 종료 (port range : 0~65535)
request : 클라이언트가 요청할때 발생하는 이벤트
connection : 클라이언트가 접속할때 발생하는 이벤트
close : 서버가 종료될 때 발생하는 이벤트
checkContinue : 클라이언트가 지속적인 연결을 하고 있을 때 발생하는 이벤트
upgrade : 클라이언트가 HTTP 업그레이드를 요청할 때 발생하는 이벤트
clientError : 클라이언트에서 오류가 발생할 때 발생하는 이벤트

<response 객체>
writeHead(statusCode, object) : 응답 헤더를 작성
end([data],[encoding]) : 응답 본문을 작성

<File System 모듈을 사용한 html 페이지 제공>
MIME 형식  html : {'Content-Type' : 'image/jpeg'});
	   mp3 : {'Content-Type' : 'audio/mp3'});
	   jpg : {'Content-Type' : 'image/jpeg'});
	   etc : css, plain, xml, jpeg, png, mpeg

<쿠키 생성>
쿠키는 키와 값이 들어있는 작은 데이터 조각으로 이름, 값, 파기 날짜와 경로정보를 가지고 있음.
서버와 클라이언트에서 모두 저장하고 사용한다. 주로 클라이언트에 저장한다. 이유는 서버에 모든 클라이언트의
쿠키를 저장할 경우 과부하가 걸림.

<페이지 강제 이동>
writeHead(statusCode, obj);
-> statusCode list : 1xx 처리중  3xx 리다이렉트       5xx 서버오류
		     2xx 성공    4xx 클라이언트 오류 

<request 객체>
server 객체의 request 이벤트가 발생할 때 이벤트 리스너의 첫 번째 매겨변수에 request 객체가 들어간다.
method : 클라이언트의 요청 방식을 나타냅니다
url : 클라이언트가 요청한 url을 나타냅니다
headers : 요청 메세지 헤더를 나타냅니다
trailers : 요청 메시지 트레일러를 나타냅니다
httpVersion : http 프로토콜 버전을 나타냅니다

<url 속성에 따라 페이지 구분>
https://nodejs.org/docs/latest/api/url.html 참조
페이지가 많아질 경우 코딩하기 힘듬 -> router의 개념 도입

<POST vs GET>
POST는 GET보다 데이터를 더 많이 담을 수 있고 보안 측면에서도 좋다. GET방식은 요청을 하면서 데
이터 전달을 하므로 URL을 보면 다 알 수 있다. 따라서 보안에 안좋다. POST방식은 요청과 별도로
데이터를 전달해야 한다. 따라서 GET요청보다는 속도가 느리다.




  


